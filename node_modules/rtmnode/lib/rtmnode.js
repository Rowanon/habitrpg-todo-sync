var request = require('superagent');
var md5 = require('MD5');
var util = require('util');
var url = require('url');

function RtmNode(apiKey, sharedSecret) {
  // Privileged variables
  // TODO: Maybe don't force the format
  this.apiEndpoint = 'https://api.rememberthemilk.com/services/rest';
  this.apiKey = apiKey;
  this.sharedSecret = sharedSecret;

  // Privileged functions
  this.getSignature = function(queryParams) {
    console.log("getSignature query parameters: " + util.inspect(queryParams));
    // So we have an object representing our query string, yeah? And we have to put it in order and stuff. So first we get sorted keys.
    var sortedKeys = Object.keys(queryParams).sort();

    // K, now basically just iterate over the keys and concatenate the key and its value onto our string.
    var basisString = "";

    sortedKeys.forEach(function(item) {
      // Umm, let's see...queryParams[item] is the value, so...
      basisString += item;
      basisString += queryParams[item];
    });

    console.log("Sorted keys: " + util.inspect(sortedKeys));
    console.log("Basis string: " + util.inspect(basisString));

    // MD5 it!
    return md5(this.sharedSecret + basisString);
  };

  this.defaultParameters = {
    format: "json",
    api_key: this.apiKey
  };

  // TODO: This should be more generalized
  this.getFrob = function(existingFrob, callback) {
    if (!existingFrob) {
      var apiRequest = this.apiEndpoint;
      var queryParams = this.defaultParameters;
      queryParams.method = "rtm.auth.getFrob";
      queryParams.api_sig = this.getSignature(queryParams);

      console.log(util.inspect(queryParams));

      request.get(apiRequest)
        .query(queryParams)
        .type('application/json')
        .end(function(res) {
          if (res.ok) {
            res.text = JSON.parse(res.text);
          }
          if (res.ok && res.text.rsp.stat == "ok") {
            console.log('Result from getFrob: ' + util.inspect(res.text, {showHidden: true}));
            if (callback) {
              callback(res.text.rsp.frob);
            }
          }
          else {
            console.log('Error in getFrob: ' + res.text);
          }
        });
    }
    else {
      if (callback) {
        callback(existingFrob);
      }
    }
  };

  this.getAuthUrl = function(frob) {
    var authUrlObject = {
      protocol: "http",
      hostname: "www.rememberthemilk.com",
      pathname: "/services/auth",
      query: {
        api_key: this.apiKey,
        perms: "delete",
        frob: frob
      }
    };
    authUrlObject.query.api_sig = this.getSignature(authUrlObject.query);

    return url.format(authUrlObject);
  };

  // TODO: Copied and pasted from getFrob. Should instead refactor the common parts.
  this.getToken = function(frob, callback) {
    var apiRequest = this.apiEndpoint;
    console.log("Query parameters (should be empty): " + util.inspect(queryParams));
    // TODO: Actually fix the scoping!!!
    if (queryParams !== undefined) {
      queryParams = "";
    }
    console.log("Before defaultParameters: " + util.inspect(queryParams));
    var queryParams = this.defaultParameters;
    console.log("After defaultParameters: " + util.inspect(queryParams));
    queryParams.method = "rtm.auth.getToken";
    queryParams.frob = frob;

    console.log(util.inspect(queryParams));

    queryParams.api_sig = this.getSignature(queryParams);

    request.get(apiRequest)
      .query(queryParams)
      .type('application/json')
      .end(function(res) {
        if (res.ok) {
          res.text = JSON.parse(res.text);
        }
        if (res.ok && res.text.rsp.stat == "ok") {
          console.log('Result from getToken: ' + util.inspect(res.text, {showHidden: true}));
          if (callback) {
            callback(res.text.rsp.auth.token);
          }
        }
        else {
          console.log('Error in getToken: ' + util.inspect(res.text));
        }
      });
  };

  this.checkToken = function(authToken, callback) {

  };
}

module.exports = RtmNode;
